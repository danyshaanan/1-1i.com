<html lang=en>
<head>
<style>
body { margin: 0; overflow: hidden; }
</style>
</head>
<body>

<script>
'use strict'

////////////////////// Canvas //////////////////////////////////////////////////

function Canvas() {
  var canvas = this.canvas = document.createElement('canvas')
  var ctx, imageData
  this.init = function() {
    canvas.width = document.documentElement.clientWidth
    canvas.height = document.documentElement.clientHeight
    ctx = canvas.getContext('2d')
    imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)
  }
  this.init()
  this.set = function(x, y, c) {
    var index = (canvas.width * y + x) << 2
    imageData.data[index+0] = c.r % 256
    imageData.data[index+1] = c.g % 256
    imageData.data[index+2] = c.b % 256
    imageData.data[index+3] = 255
  }
  this.drawPixels = function(cb) {
    var t = Date.now()
    for (var y = 0; y < canvas.height; ++y) {
      for (var x = 0; x < canvas.width; ++x) {
        this.set(x, y, cb(x, y))
      }
    }
    ctx.putImageData(imageData, 0, 0)
    document.title = Date.now() - t
  }
  document.body.appendChild(canvas)
}

////////////////////// Logic ///////////////////////////////////////////////////

var r2 = Math.pow(8, 2)
var oneByLogR2 = 1/Math.log(r2)

function iterations(a0, b0, max) {
  var a = 0
  var b = 0
  var i = 0
  while (++i < max && a*a + b*b < r2) {
    var prevA = a
    a = a*a - b*b + a0
    b = 2*prevA*b + b0
  }
  if (i < max) return i - Math.log(a*a + b*b)*oneByLogR2
}

////////////////////// Colors //////////////////////////////////////////////////

function rainbow(i, lightness){
    // i += 1000000000 - Date.now() / 10000 //animation
    function hueToC(t){
      t %= 6
      if (t < 1) return t
      if (t < 3) return 1
      if (t < 4) return 4 - t
      return 0
    }
    i *= 6
    return {
      r: lightness * hueToC(i + 2),
      g: lightness * hueToC(i + 0),
      b: lightness * hueToC(i + 4)
    }
}

function iterationsToColor(iterationsToEscape, iterationsLeft) {
  return rainbow(iterationsToEscape/120, 255 * Math.min(1, iterationsLeft/20))
}

////////////////////// Execution ///////////////////////////////////////////////


var def = { cA: -3, cB: -1.5, zoom: 1/256, i: 88 }

function getColor(x, y) {
  var i = iterations(x * def.zoom + def.cA, y * def.zoom + def.cB, def.i)
  return iterationsToColor(i, def.i - i)
}

var canvas = new Canvas()
canvas.drawPixels(getColor)

window.onresize = function() {
  canvas.init()
  canvas.drawPixels(getColor)
}


function frame() {
  canvas.drawPixels(getColor)
  requestAnimationFrame(frame)
}

// frame() //animation

////////////////////// Keyboard ////////////////////////////////////////////////

var actions = {
  73: function() { def.i += 20 }, //i
  79: function() { def.i = Math.max(8, def.i - 20) }, //o
  83: function() { window.localStorage.def = JSON.stringify(def) }, //s
  76: function() { def = JSON.parse(window.localStorage.def) }, //l
}

window.onkeyup = function(e){
  if (actions[e.keyCode]) {
    e.preventDefault()
    actions[e.keyCode]()
    canvas.drawPixels(getColor)
  }
}

////////////////////// Mouse ///////////////////////////////////////////////////

function zoomAround(zoom, mouseEvent) {
  def.cA += mouseEvent.layerX * def.zoom
  def.cB += mouseEvent.layerY * def.zoom
  def.zoom *= zoom
  def.cA -= mouseEvent.layerX * def.zoom
  def.cB -= mouseEvent.layerY * def.zoom
}

var downE
canvas.canvas.oncontextmenu = function(e) { return false }
canvas.canvas.onmousedown = function(e) { downE = e }
canvas.canvas.onmouseup = function(upE) {
  var diff = { x: downE.layerX - upE.layerX, y: downE.layerY - upE.layerY }
  if (diff.x*diff.x + diff.y*diff.y > 25) {
    def.cA += diff.x * def.zoom
    def.cB += diff.y * def.zoom
  } else {
    zoomAround(upE.which === 1 ? 0.5 : 2, upE)
  }
  canvas.drawPixels(getColor)
}


canvas.canvas.onwheel = function(e) {
  zoomAround(Math.pow(2, -Math.sign(e.wheelDelta)), e)
  canvas.drawPixels(getColor)
  return false
}

////////////////////////////////////////////////////////////////////////////////


</script>

</body>
</html>
